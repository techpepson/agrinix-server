// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @unique @default(uuid())
  name            String
  email           String         @unique
  password        String
  profilePicture  String?
  isEmailVerified Boolean?       @default(false)
  emailToken      String?
  crops           Crop[]
  notifications   Notification[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  message         Message[]
  response        Response[]
  messageLikes    MessageLike[]
  responseLikes   ResponseLike[]
}

model Crop {
  id         String  @id @unique @default(uuid())
  user       User    @relation(fields: [userId], references: [id])
  name       String
  infections Disease @relation(fields: [diseaseId], references: [id])
  diseaseId  String
  userId     String
}

model Disease {
  id                          String   @id @unique @default(uuid())
  crops                       Crop[]
  diseaseTop                  String
  diseaseClass                String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  diseaseImages               Image[]
  diseaseDescription          String
  inferenceId                 String
  diseasePredictionConfidence Int
  diseaseSymptoms             String[]
  diseasePrevention           String[]
  diseaseCauses               String[]
  accuracy                    Int
}

model Message {
  id               String        @id @unique @default(uuid())
  messageTitle     String
  messageBody      String
  messageImage     String?
  messageLink      String?
  messageLikes     Int           @default(0)
  messageDislikes  Int           @default(0)
  messageResponses Response[]
  author           User          @relation(fields: [authorId], references: [id])
  authorId         String
  messageRead      Boolean       @default(false)
  messageCreatedAt DateTime      @default(now())
  messageUpdatedAt DateTime      @updatedAt
  likes            MessageLike[]
}

model Image {
  id          String   @id @unique @default(ulid())
  imageUrl    String[]
  imageWidth  Int
  imageHeight Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Disease     Disease? @relation(fields: [diseaseId], references: [id])
  diseaseId   String?
}

model Response {
  id                String         @id @unique @default(uuid())
  responseBody      String
  responseLikes     Int            @default(0)
  responseDislikes  Int            @default(0)
  responseAuthor    User           @relation(fields: [responseAuthorId], references: [id])
  responseAuthorId  String
  message           Message?       @relation(fields: [messageId], references: [id])
  messageId         String?
  responseCreatedAt DateTime       @default(now())
  responseUpdatedAt DateTime       @updatedAt
  likes             ResponseLike[]
}

model MessageLike {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId])
}

model ResponseLike {
  id         String   @id @unique @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
  createdAt  DateTime @default(now())

  @@unique([userId, responseId])
}

model Notification {
  id                    String   @id @unique @default(uuid())
  notificationTitle     String
  notificationBody      String
  notificationType      String
  notificationImage     String?
  notificationLink      String?
  notificationRead      Boolean  @default(false)
  notificationCreatedAt DateTime @default(now())
  notificationUpdatedAt DateTime @updatedAt
  receiver              User?    @relation(fields: [userId], references: [id])
  userId                String?
}

model Logs {
  id String @id @unique @default(ulid())
}

model Journal {
  id String @id @default(uuid())
}
